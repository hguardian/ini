// peg based parser for ini files
{ package parser }

File <- lines:Line* EOF {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf("\n\n\n>> File: %s // '%s'", c.pos, string(c.text))

    // convert iface to []*Line 
    lsSlice := toIfaceSlice(lines)
    ls := make([]*Line, len(lsSlice))
    for i, l := range lsSlice {
        ls[i] = l.(*Line)
    }

    return NewFile(ls), nil
}

Line <- ws:_ item:(Comment / Section / KeyValuePair)? le:LineEnd {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> Line: %s // '%s'", c.pos, string(c.text))
    it, _ := item.(Item)
    return NewLine(c.pos, ws.(string), it, le.(string)), nil
}

Comment <- cs:(';' / '#') comment:CommentVal {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> Comment: %s // '%s'\n", c.pos, string(c.text))
    return NewComment(c.pos, string(cs.([]byte)), comment.(string)), nil
}

CommentVal <- (!LineEnd .)* {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> CommentVal: %s // '%s'\n", c.pos, string(c.text))
    return string(c.text), nil
}

Section <- '[' ws0:_ name:SectionName ws1:_ subsection:(SubSection)? ']' ws2:_ comment:Comment? {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> Section: %s // '%s'\n", c.pos, name)
    sub, _ := subsection.(*SubSection)
    com, _ := comment.(*Comment)
    return NewSection(c.pos, ws0.(string), name.(string), ws1.(string), sub, ws2.(string), com), nil
}

SubSection <- '"' name:SectionName '"' ws:_ {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> SubSection: %s // '%s'\n", c.pos, string(c.text))
    return NewSubSection(c.pos, name.(string), ws.(string)), nil
}

SectionName <- [^#; \t\r\n[\]"]+ {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> SectionName: %s // '%s'\n", c.pos, string(c.text))
    return string(c.text), nil
}

KeyValuePair <- key:Key '=' ws:_ val:Value comment:Comment? {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> KeyValuePair: %s // '%s': '%s'\n", c.pos, key, val)
    com, _ := comment.(*Comment)
    return NewKeyValuePair(c.pos, key.(string), ws.(string), val.(string), com), nil
}

Key <- [^#;=\r\n[\]]+ {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> Key: %s // '%s'\n", c.pos, string(c.text))
    return string(c.text), nil
}

Value <- [^;#\r\n]* {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> Value: %s // '%s'\n", c.pos, string(c.text))
    return string(c.text), nil
}

LineEnd <- "\r\n" / '\n' {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> LineEnd: %s\n", c.pos)
    return string(c.text), nil
}

_ "whitespace" <- [ \t]* {
    lastPosition = c.pos
    lastText = string(c.text)

    //fmt.Printf(">> _ %s\n", c.pos)
    return string(c.text), nil
}

EOF <- !.
